---
# tasks file for consul
# ==============================================================================
#   Pre-install
# ==============================================================================

# - name: include variables
#   include_vars: default.yml

- name: Install required packages
  become: true
  package:
    name:
      - unzip
      - iproute
    state: present

- name: Gather facts for populating default values
  setup:
    gather_subset:
      - "!all"
      - "network"

# ==============================================================================
#   Folders
# ==============================================================================

- name: Check folders
  stat:
    path: "{{ item }}"
  register: folder_status
  loop:
    - "{{ path.settings }}/{{ application }}.d"
    - "{{ path.binaries }}"
    - "{{ path.packages }}/{{ application }}/{{ version }}"
    - "{{ path.systemd }}/{{ application }}.service.d"
    - "{{ path.storage }}/{{ application }}"
    - "{{ path.logs }}/{{ application }}"
    - "{{ path.runtime }}/{{ application }}"

- name: Create folders
  become: true
  file:
    dest: "{{ item.item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  when: not item.stat.exists | bool
  loop: "{{ folder_status.results }}"

# ==============================================================================
#   Download & install
# ==============================================================================

- name: Check if version already installed
  stat:
    path: "{{ path.packages }}/{{ application }}/{{ version }}/{{ application }}"
  register: installed_status

- name: INSTALLATION
  block:

    - name: Check if archive exists on disk
      stat:
        path: "{{ path.temp }}/{{ package_name }}.zip"
      register: archive_status

    - name: Download archive
      get_url:
        url: "{{ package_url }}"
        dest: "{{ path.temp }}"
        checksum: "sha256:{{ checksum_url }}"
        validate_certs: false
      register: download_status
      when: not archive_status.stat.exists

    - name: Extract binary from archive
      become: true
      unarchive:
        src: "{{ path.temp }}/{{ package_name }}.zip"
        dest: "{{ path.packages }}/{{ application }}/{{ version }}"
        remote_src: yes

    - name: Symlink binary
      become: true
      notify:
        - restart_unit
      file:
        src: "{{ path.packages }}/{{ application }}/{{ version }}/{{ application }}"
        path: "{{ item }}"
        state: link
      loop:
        - "{{ path.binaries }}/{{ application }}"

  when: >
    not installed_status.stat.exists or
    force_install

# ==============================================================================
#   Configuration
# ==============================================================================

- name: Configure environment profile
  become: true
  notify:
    - reload_daemon
  template:
    dest: "{{ path.profile }}/50-{{ item }}"
    src: "{{ item }}.j2"
    owner: "root"
    group: "root"
    mode: 0644
  loop:
    - environment.sh

# Stream yaml-variables to json configuration file on disk
- name: Configure application settings
  become: true
  notify:
    - reload_daemon
  copy:
    content: "{{ config | to_nice_json }}"
    dest: "{{ path.settings }}/{{ application }}.d/config.json"
    owner: "root"
    group: "root"
    mode: 0644

- name: Configure systemd unit definition
  become: true
  notify:
    - reload_daemon
    - restart_unit
  template:
    dest: "{{ path.systemd }}/{{ application }}.service"
    src: "service.j2"
    owner: root
    group: root
    mode: 0644

# ==============================================================================
#   (Optional) Extra configuration options
# ==============================================================================

- name: (Extra) Manage dnsmasq
  block:
    - include: _dnsmasq.yml
  when: configure_dnsmasq

- name: (Extra) Manage firewalld
  block:
    - include: _firewalld.yml
  when: configure_firewalld

- name: (Extra) Manage selinux
  block:
    - include: _selinux.yml
  when: configure_selinux

# ==============================================================================
#   Post-install
# ==============================================================================

- name: Start and enable systemd unit
  become: true
  notify:
    - reload_daemon
  systemd:
    name: "{{ application }}"
    masked: no
    enabled: yes
    state: started

- name: Flush handlers
  meta: flush_handlers
